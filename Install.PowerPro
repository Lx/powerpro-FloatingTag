; ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
; Floating Tag v1.0 Installation
; Written by Alex Peters, 30/11/2003

; ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
; The installation script (and also Floating Tag itself) requires that
; the ‘Use Quote for Escape in Expression Strings’ option (found under
; Configuration > Setup > Advanced Setup > Characters) is ticked. If
; this option is not ticked, we must abort the installation and let the
; user know how to set the option.

If(Length("'r") == 2) Do
    MessageBox("Stop", "Installation cannot continue until a PowerPro setting is changed. Please enter Configuration > Setup > Advanced Setup > Characters, tick the ‘Use Quote for Escape in Expression Strings’ option, and then try again.", "Floating Tag v1.0 Installation")
    Quit
EndIf

; ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
; Ensure that all needed files for installation exist.

.@FileCheck("Back.bmp")
.@FileCheck("FloatingTag.PowerPro")
.@FileCheck("Import.txt")
.@FileCheck("Skin.txt")

; ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
; Briefly describe the Floating Tag kit's purpose and ask if
; installation should continue. If the user clicks ‘No’, abort the
; installation.

If(MessageBox("Information YesNo", "The Floating Tag kit allows you to minimise as many as ten windows at once, to small draggable ‘tags’ on screen.'n'nWould you like to continue with the installation?", "Floating Tag v1.0 Installation") == 7)
    Quit

; ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
; Attempting to automatically modify the PowerPro configuration seems to
; be a dangerous practice while PowerPro Configuration is open, since
; pressing OK or Cancel after the installation has made its changes will
; result in those changes being undone. We can prevent the script from
; continuing until PowerPro Configuration is closed, so that this can't
; happen.

For(AnyWindow("=PProConf"))
    If(Not(MessageBox("Stop OKCancel", "Installation cannot continue while the PowerPro Configuration Editor is running.'n'nPlease close it and click OK to continue.", "Floating Tag v1.0 Installation")))
        Quit
EndFor

; ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
; This is an attempt at figuring out which configuration is running.
; PowerPro provides us with the folder of the currently running PowerPro
; configuration, but not the file itself. We can scan this given folder
; for .PCF files, and if only one .PCF file exists in this folder, then
; that file is the current configuration and we can bet that this is the
; one to which we wish to install Floating Tag. If there are more than
; one .PCF file, however, then we can present a combo box and allow the
; user to select the correct file.

; ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
; We are excluding all .PCF files that begin with ‘!Auto backup of’ and
; ‘!Previous auto backup’, since it is unlikely that the user will want
; to install Floating Tag to one of these configurations.

Static PCFList
PCFList = ""
File.AllFiles(PProFolder ++ "*.PCF", ".@ProcessPCFs('"|'")")

; ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
; If there is more than one PowerPro configuration in the given folder,
; then we will present a list of each configuration, with the first file
; in the list selected by default.

Local PCF
PCF = Select(PCFList, Index(PCFList, "|") - 1)

; ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
; If a configuration by the name of ‘PProConf.pcf’ exists, however, then
; we will select that by default since it's most likely that that will
; be the desired configuration for installation.

If(ValidPath(PProFolder ++ "PProConf.pcf"))
    PCF = PProFolder ++ "PProConf.pcf"

; ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
; Present a dialogue asking for the path to the desired configuration
; for installation. If more than one configuration was found in the
; current configuration's folder, then display a combo box that contains
; the names of each configuration found; otherwise, display the current
; configuration as default.

; ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
; Keep presenting this dialogue until either a valid .PCF file is
; specified, or the user cancels the installation.

PCFList = Remove(PCFList, -1)

For()
    If(Not(InputDialog("PCF=Please select the .PCF file to which to install Floating Tag:" ++ IfElse(Index(PCFList, "|"), "??" ++ PCFList), "Floating Tag v1.0 Installation")))
        Quit
    If(ValidPath(PCF))
        Break
    If(Not(MessageBox("Warning OKCancel", "This file does not exist:'n" ++ PCF ++ "'n'nPlease enter an existing PowerPro configuration.", "Floating Tag v1.0 Installation")))
        Quit
EndFor

; ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
; We will now check the specified PCF file for an existing command list
; named ‘Floating Tag: X’, to prevent accidental overwriting. We will do
; this by exporting every bar from this configuration to a text file,
; and then searching that text file for a Floating Tag command lists.

; ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
; PowerPro must be running in order for this installation script to be
; running. Therefore, we can find the full path of PowerPro, and hence
; PProConf, which we need in order to export the configuration's bars.

Local PowerProPath
PowerProPath = Win.EXEPath("=PowerPro")
Local PProConfPath
PProConfPath = Select(PowerProPath, RevIndex(PowerProPath, "\")) ++ "PProConf.exe"
Local BarCheckPath
BarCheckPath = ScriptFolder ++ "\BarCheck.txt"
;*Debug Checking your configuration...
Do(PProConfPath, "'"" ++ PCF ++ "'" /L:'"" ++ BarCheckPath ++ "'"")

; ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
; We're waiting for PProConf to start and finish writing to this text
; file, so that we know when to continue. Then, we'll read the file into
; a variable and do away with the file.

For(Not(ValidPath(BarCheckPath)))
    *Wait Sleep 500
EndFor

Local BarCheck
For(ValidPath(BarCheckPath))
    *Wait Sleep 500
    BarCheck = File.ReadAll(BarCheckPath)
    File.DeleteNoRecycle(BarCheckPath)
EndFor

; ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
; If the configuration contains Floating Tag command lists, display a
; confirmation box allowing the user to abort the installation.

Local Iter
For(Iter = 0; Iter LE 10; Iter = Iter + 1)
    If(Index(BarCheck, "'r'n[**Floating Tag: " ++ Iter ++ "]'r'n")) Do
        If(MessageBox("Question YesNo", "‘Floating Tag: X’ command lists already exist in the PowerPro configuration that you selected.'n'nDo you wish to overwrite these command lists?", "Floating Tag v1.0 Installation") == 7) Do
            Quit
        Else
            Break
        EndIf
    EndIf
EndFor

; ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
; Import the Floating Tag command list into the configuration.

Do(PProConfPath, "'"" ++ PCF ++ "'" /I:'"" ++ ScriptFolder ++ "\Import.txt'"")

; ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
; Install the Floating Tag script into the Scripts folder, creating the
; folder if necessary.

If(Not(ValidPath(PProFolder ++ "Scripts")))
    Do("*Exec NewFolder", PProFolder ++ "Scripts")
Do("*File Copy", "'"" ++ ScriptFolder ++ "\FloatingTag.PowerPro'" '"" ++ PProFolder ++ "Scripts\FloatingTag.PowerPro'"")

; ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
; Install the Floating Tag skin bitmap and text files into a FloatingTag
; subfolder of the Skins folder, creating the folders as required.

If(Not(ValidPath(PProFolder ++ "Skins")))
    Do("*Exec NewFolder", PProFolder ++ "Skins")
If(Not(ValidPath(PProFolder ++ "Skins\FloatingTag")))
    Do("*Exec NewFolder", PProFolder ++ "Skins\FloatingTag")
Do("*File Copy", "'"" ++ ScriptFolder ++ "\Back.bmp'" '"" ++ PProFolder ++ "Skins\FloatingTag\Back.bmp'"")
Do("*File Copy", "'"" ++ ScriptFolder ++ "\Skin.txt'" '"" ++ PProFolder ++ "Skins\FloatingTag\Skin.txt'"")

; ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
; Notify the user that the installation is complete, and that they will
; need to set up a method of showing the bar.

; ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
; BUG: It's possible to offer to open PProConf for the user, but for
;      some strange reason, nothing below the next MessageBox() line is
;      executed -- on at least two XP systems.

MessageBox("Information", "The installation of the Floating Tag kit is now complete.'n'nYou will need to set up a method of invoking the Floating Tag script manually; please refer to the included Read Me file for information on invoking.", "Floating Tag v1.0 Installation")
Do(PProConfPath, "'"" ++ PCF ++ "'"")

Quit

; ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
; This section of the script is called when the PProFolder is scanned
; for .PCF files. It removes unnecessary entries from the list.

@ProcessPCFs

    Local FileOnly
    FileOnly = Remove(Arg(1), RevIndex(Arg(1), "\"))
    If(Index(FileOnly, "!Auto backup of ") == 1)
        Quit
    If(Index(FileOnly, "!Previous auto backup ") == 1)
        Quit
    Static PCFList
    PCFList = PCFList ++ Arg(1) ++ "|"
    Quit

; ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
; This section of the script is called when the PProFolder is scanned
; for .PCF files. It removes unnecessary entries from the list.

@FileCheck

    If(Not(ValidPath(ScriptFolder ++ "\" ++ Arg(1)))) Do
        MessageBox("Stop", "The following file could not be found:'n" ++ Arg(1) ++ "'n'nInstallation cannot continue without this file. Please extract the contents of the archive into a folder and try again.", "Floating Tag v1.0 Installation")
        Quit All
    EndIf

    Quit
; ______________________________________________________________________
